// src/bot/telegraf.js
import { Telegraf } from 'telegraf';

if (!process.env.BOT_TOKEN) {
  console.error('BOT_TOKEN is not set');
}

export const bot = new Telegraf(process.env.BOT_TOKEN);

// –ø—Ä–æ—Å—Ç–æ–π –ª–æ–≥–≥–µ—Ä –∞–ø–¥–µ–π—Ç–æ–≤
bot.use(async (ctx, next) => {
  try {
    const t = ctx.message?.text || ctx.callbackQuery?.data;
    console.log('‚û°Ô∏è update', {
      from: ctx.from?.id,
      text: t,
      type: Object.keys(ctx.update)
    });
  } catch (e) {}
  return next();
});

// /start
bot.start(async (ctx) => {
  await ctx.reply('üëã –ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç –Ω–∞ –≤–µ–±—Ö—É–∫–µ –≥–æ—Ç–æ–≤. –ù–∞–ø–∏—à–∏ /whoami');
});

// /whoami
bot.command('whoami', async (ctx) => {
  try {
    await ctx.reply(`Your Telegram ID: ${ctx.from?.id}`);
  } catch (e) {
    console.error('‚ùå whoami send error', e);
  }
});

// —ç—Ö–æ –Ω–∞ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç
bot.on('text', async (ctx) => {
  console.log('üó£ text', ctx.from?.id, '->', ctx.message?.text);
  try {
    await ctx.reply('echo: ' + ctx.message.text);
  } catch (e) {
    console.error('‚ùå send error', e);
  }
});

// ‚ùó –≠–∫—Å–ø–æ—Ä—Ç –≥–æ—Ç–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—Ç Telegraf
export const webhookCallback = bot.webhookCallback('/bot/webhook', {
  timeout: 30000, // –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å, –Ω–æ –ø—É—Å—Ç—å –±—É–¥–µ—Ç
});
