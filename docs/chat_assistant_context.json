{
  "project": "tgbotcpa",
  "purpose": "Telegram-бот для управления офферами и отслеживания CPA-конверсий",
  "stack": {
    "runtime": "Node.js 20",
    "frameworks": ["Express", "Telegraf"],
    "process": "PM2",
    "db": "PostgreSQL"
  },
  "entrypoints": [
    "src/api/server.js",
    "src/bot/run-bot.js",
    "ecosystem.config.cjs"
  ],
  "commands": {
    "dev": "NODE_ENV=dev npm run bot",
    "start": "npm start",
    "api": "npm run api",
    "bot": "npm run bot",
    "migrate": "npm run migrate"
  },
  "env": {
    "BOT_TOKEN": "string|required|токен Telegram-бота",
    "BASE_URL": "url|required|публичный URL API для webhook/redirect",
    "PORT": "number|optional|порт HTTP-сервера (по умолчанию 3000)",
    "DATABASE_URL": "url|required|подключение к PostgreSQL",
    "CPA_POSTBACK_URL": "url|required|endpoint CPA-сети для отправки постбеков",
    "CPA_PB_SECRET": "string|required|секрет подписи HMAC для CPA (dev-значение при отсутствии)",
    "ALLOWED_UPDATES": "csv|optional|ограничение типов апдейтов Telegram",
    "TZ": "string|optional|часовой пояс приложения",
    "DEBUG_TOKEN": "string|optional|ключ для debug эндпоинтов",
    "NODE_ENV": "string|optional|режим запуска (dev включает polling)",
    "WEBHOOK_PATH": "string|optional|принудительный webhook-режим"
  },
  "workflows": [
    "ads_wizard: пользователь отправляет /ads → сцена в adsWizard.js собирает параметры → валидация ставок/лимитов → INSERT в offers",
    "offer_click: GET /click/:offerId → проверка UUID → запись в clicks/start_tokens → редирект в t.me с start токеном",
    "postback/webhook: Telegram шлёт POST на /bot/webhook → bot.handleUpdate → сцена/команды → attribution в БД → relay/CPA POST",
    "deploy: PR в main → ручной или GHA SSH → git pull в /opt/tgbotcpa → npm ci → npm run migrate → pm2 reload tg-api"
  ],
  "repo_map": [
    { "path": "src/bot/adsWizard.js", "role": "Wizard-сцена /ads" },
    { "path": "src/api/server.js", "role": "Express API и webhook" },
    { "path": "ecosystem.config.cjs", "role": "Конфиг PM2" },
    { "path": "package.json", "role": "Скрипты и зависимости" }
  ],
  "healthcheck": { "path": "/health", "expect": "200 OK", "note": "возвращает {\"ok\":true}" },
  "next_steps": [
    "Импортировать config/Markup и убрать дублирование Stage в src/bot/telegraf.js",
    "Добавить import crypto в src/api/server.js для sendCpaPostback",
    "Настроить мониторинг наличия BOT_TOKEN/BASE_URL и работоспособности webhook",
    "Подготовить .env.example с описанием переменных"
  ]
}
